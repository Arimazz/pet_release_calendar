{"version":3,"sources":["constants/config.ts","api/api.ts","selectors/index.ts","store/initStore.ts","components/Calendar/Header.tsx","components/Loading/Loading.tsx","components/Calendar/Cells.tsx","hooks/usePrev.tsx","components/Calendar/Calendar.tsx","screens/App/App.tsx","screens/Date/DateScreen.tsx","screens/Router/Router.tsx","index.tsx"],"names":["API_KEY","RAWG_DATE_FORMAT","day","monthStart","dateFns","monthEnd","makeRequestWithPage","page","axios","get","headers","params","platforms","dates","ordering","page_size","timeout","data","loadResultToData","res","results","res1","count","res2","res3","result","slug","id","gamesDataSelector","state","gamesData","gamesDataSlice","createSlice","name","initialState","meta","reducers","recordData","payload","next","previous","combinedReducers","combineReducers","reducer","actions","store","configureStore","Header","prevMonthCallback","nextMonthCallback","currentLocale","currentMonth","className","onClick","locale","Loading","type","color","height","width","Cells","rows","onDateClick","useMemo","length","map","row","index","isDisabled","formattedDate","isLoading","item","added","String","usePrevious","value","ref","useRef","useEffect","current","connect","dispatch","bindActionCreators","useState","Date","setCurrentMonth","uk","days","setDays","setRows","isStartLoading","setIsStartLoading","isFreezing","setIsFreezing","history","useHistory","previousMonth","fillDays","fillRows","getMonthData","currentDays","startDate","i","push","endDate","cloneDay","a","API","requestMonthGames","Error","findex","sindex","currentDay","filter","released","slice","tempRows","App","Component","DateScreen","games","setGames","currentDate","useParams","getCurrentDateData","date","requestDayGames","getGameDataById","requestGameInfo","requestStoresInfo","description_raw","stores","storesWithLinks","item2","findData","find","store_id","newList","description","withDetails","background_image","genres","metacritic","trailers","storeLinks","src","alt","rel","target","href","url","deleteExtraData","Router","exact","path","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba6b2035.chunk.js","sourcesContent":["export const API_KEY = '71fed632d4534bfea69e3d18c9926374';\r\nexport const RAWG_DATE_FORMAT = 'yyyy-MM-dd';","import axios from 'axios';\r\nimport {API_KEY, RAWG_DATE_FORMAT} from '../constants/config';\r\nimport * as dateFns from 'date-fns';\r\nclass API {\r\n  async requestMonthGames (day: Date) {\r\n    const monthStart = dateFns.format(dateFns.startOfMonth(day), RAWG_DATE_FORMAT);\r\n    const monthEnd = dateFns.format(dateFns.endOfMonth(day), RAWG_DATE_FORMAT);\r\n\r\n    const makeRequestWithPage = (page: number) => {\r\n      return axios.get(`https://api.rawg.io/api/games?key=${API_KEY}`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        params: {\r\n          platforms: '4',\r\n          dates: `${monthStart},${monthEnd}`,\r\n          ordering: '-added',\r\n          page_size: 40, // max page size\r\n          page,\r\n        },\r\n        timeout: 3000,\r\n      });\r\n    }\r\n    \r\n    try {\r\n      let data: any = [];\r\n\r\n      const loadResultToData = (res: any) =>  {\r\n        data = [...data, ...res.data.results];\r\n      }\r\n\r\n      const res1 = await makeRequestWithPage(1);\r\n      loadResultToData(res1);\r\n      const count = res1.data.count;\r\n      if (count >= 80) {\r\n        const res2 = await makeRequestWithPage(2);\r\n        loadResultToData(res2);\r\n      }\r\n      if (count >= 120) {\r\n        const res3 = await makeRequestWithPage(3);\r\n        loadResultToData(res3);\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      return 'ERROR'\r\n    }\r\n  }\r\n\r\n  async requestDayGames(day: string) {\r\n    try {\r\n      const result = await axios.get(`https://api.rawg.io/api/games?key=${API_KEY}`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        params: {\r\n          platforms: '4',\r\n          dates: `${day},${day}`,\r\n          ordering: '-added',\r\n          page_size: 40,\r\n        },\r\n        timeout: 3000,\r\n      });\r\n    return result;\r\n    } catch (error) {\r\n      // console.log('ERROR', error);\r\n      \r\n      return 'ERROR'\r\n    }\r\n  }\r\n\r\n  async requestStoresInfo (slug: string) {\r\n    const result = await axios.get(`https://api.rawg.io/api/games/${slug}/stores?key=${API_KEY}`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    return result;\r\n  }\r\n\r\n  async requestGameInfo (id: number) {\r\n    const result = await axios.get(`https://api.rawg.io/api/games/${id}?key=${API_KEY}`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    return result;\r\n  }\r\n\r\n  async requestGameTrailers (id: number) {\r\n    const result = await axios.get(`https://api.rawg.io/api/games/${id}/movies?key=${API_KEY}`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    return result;\r\n  }\r\n\r\n  // async test() {\r\n  //   const result = await axios.get(`https://api.rawg.io/api/games?key=${API_KEY}`, {\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //     },\r\n  //     params: {\r\n  //       platforms: '4',\r\n  //       dates: `2020-12-10,2020-12-10`,\r\n  //       // ordering: '-released',\r\n  //       ordering: '-added',\r\n  //     }\r\n  //   });\r\n  //   return result;\r\n  // }\r\n}\r\n\r\nexport default new API();","\r\nexport const gamesDataSelector = (state: any) => state.gamesData;","import { createSlice, configureStore, combineReducers } from '@reduxjs/toolkit'\r\n\r\ninterface IGamesData {\r\n  data: any,\r\n  meta: any,\r\n}\r\n\r\nexport const gamesDataInitState: IGamesData = {\r\n  data: null,\r\n  meta: null,\r\n}\r\n\r\nconst gamesDataSlice = createSlice({\r\n  name: 'gameData',\r\n  initialState: gamesDataInitState,\r\n  reducers: {\r\n    recordData: (state, payload: any) => {\r\n      const {count, next, previous, results} = payload.data;\r\n\r\n      state.data = results;\r\n      state.meta = {\r\n        count,\r\n        next,\r\n        previous\r\n      }\r\n    },\r\n  }\r\n})\r\n\r\nconst combinedReducers = combineReducers({\r\n  gamesData: gamesDataSlice.reducer,\r\n})\r\n\r\nexport const {recordData} = gamesDataSlice.actions;\r\n\r\nexport const store = configureStore({\r\n  reducer: combinedReducers,\r\n})\r\n\r\n// Can still subscribe to the store\r\n// console.log(store.getState())\r\n","import React, { FC } from 'react';\r\nimport * as dateFns from \"date-fns\";\r\n\r\nconst dateFormat = \"LLLL yyyy\";\r\n\r\ninterface IProps {\r\n  prevMonthCallback: any;\r\n  nextMonthCallback: any;\r\n  currentLocale: Locale;\r\n  currentMonth: Date;\r\n}\r\n\r\nconst Header: FC<IProps> = ({\r\n  prevMonthCallback,\r\n  nextMonthCallback,\r\n  currentLocale,\r\n  currentMonth,\r\n}) => {\r\n  return (\r\n    <div className=\"header row flex-middle\">\r\n        <div className=\"col col-start\">\r\n          <div className=\"icon\" onClick={prevMonthCallback}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n        <div className=\"col col-center\">\r\n          <span>{dateFns.format(currentMonth, dateFormat, {locale: currentLocale})}</span>\r\n        </div>\r\n        <div className=\"col col-end\">\r\n          <div className=\"icon\" onClick={nextMonthCallback}>chevron_right</div>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport RLoading from 'react-loading';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <RLoading type='spin' color='blue' className=\"loading\" height={20} width={20}  />\r\n  )\r\n}\r\n\r\nexport default Loading;","import React, { FC, useMemo } from 'react';\r\nimport Loading from '../Loading/Loading';\r\nimport {IDays} from './Calendar';\r\nimport * as dateFns from 'date-fns';\r\nimport { RAWG_DATE_FORMAT } from '../../constants/config';\r\n\r\ninterface IProps {\r\n  rows: IDays[];\r\n  onDateClick: (day: string) => void;\r\n}\r\n\r\nconst Cells: FC<IProps> = ({rows, onDateClick}) => {\r\n\r\n  const render = useMemo(() => {\r\n    if (rows.length > 0) {\r\n      return (\r\n        <div className=\"body\">\r\n          {rows.map((row, index) => (\r\n            <div className=\"row\" key={index}>\r\n              {row.map(({isDisabled, day, formattedDate, data, isLoading}) => (\r\n                <div\r\n                  className={`col cell ${\r\n                    isDisabled\r\n                      ? \"disabled\"\r\n                      : \"\"\r\n                  }`}\r\n                  key={String(day)}\r\n                  onClick={() => {              \r\n                    onDateClick(dateFns.format(day, RAWG_DATE_FORMAT));\r\n                  }}\r\n                >\r\n                  <span className=\"number\">{formattedDate}</span>\r\n                  {/* <span className=\"bg\">{formattedDate}</span> */}\r\n                  {isLoading && <Loading />}\r\n                  {data && data.map((item: any) => (\r\n                    <div key={item.name}>\r\n                      <span className={`game-title ${item.added >= 5 && 'game-title-heavy'}`}>\r\n                        {item.name}\r\n                      </span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )\r\n    }\r\n    return <Loading />\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [rows])\r\n  return render;\r\n}\r\n\r\nexport default Cells;","import {useRef, useEffect} from 'react';\r\n\r\nfunction usePrevious(value: any) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default usePrevious;","import React, { FC, useEffect, useState } from \"react\";\r\nimport * as dateFns from \"date-fns\";\r\nimport { uk } from 'date-fns/locale';\r\nimport API from '../../api/api';\r\nimport { bindActionCreators, Dispatch } from \"redux\";\r\nimport { gamesDataSelector } from \"../../selectors\";\r\nimport { connect } from \"react-redux\";\r\nimport {recordData} from '../../store/initStore';\r\nimport Header from \"./Header\";\r\nimport Cells from \"./Cells\";\r\nimport { RAWG_DATE_FORMAT } from \"../../constants/config\";\r\nimport usePrevious from \"../../hooks/usePrev\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ninterface IProps {\r\n  recordData: any;\r\n  gamesData: any;\r\n}\r\n\r\n export interface IDay {\r\n  day: Date;\r\n  formattedDate: string;\r\n  isDisabled: boolean;\r\n  data: any;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport type IDays = IDay[];\r\n\r\nconst Calendar: FC<IProps> = () => {\r\n  const [currentMonth, setCurrentMonth] = useState<Date>(new Date());\r\n  // const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n  const [currentLocale] = useState<Locale>(uk);\r\n  const [days, setDays] = useState<any>([]);\r\n  const [rows, setRows] = useState<IDays[]>([]);\r\n  const [isStartLoading, setIsStartLoading] = useState<boolean>(false);\r\n  const [isFreezing, setIsFreezing] = useState<boolean>(false);\r\n  const history = useHistory();\r\n\r\n  const previousMonth = usePrevious(currentMonth);\r\n\r\n\r\n  useEffect(() => {\r\n    fillDays();\r\n    fillRows();  \r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isStartLoading && rows.length > 0) {\r\n      getMonthData()\r\n    }\r\n    \r\n    if (currentMonth !== previousMonth) {\r\n      fillDays();\r\n      fillRows();\r\n    }\r\n    \r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentMonth, rows])\r\n\r\n  const fillDays = () => {\r\n    const dateFormat = \"iiii\";\r\n    const currentDays = [];\r\n  \r\n    let startDate = dateFns.startOfWeek(currentMonth);\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      currentDays.push(\r\n        dateFns.format(dateFns.addDays(startDate, i), dateFormat, {locale: currentLocale})\r\n      );\r\n    }\r\n\r\n    setDays(currentDays);\r\n  }\r\n\r\n  const renderDays = () => {\r\n\r\n    return (\r\n    <div className=\"days row\">\r\n      {days.length > 0 && days.map((item: any) => (\r\n        <div className=\"col col-center\" key={String(item)}>\r\n          {item}\r\n        </div>\r\n      ))}\r\n    </div>\r\n    );\r\n  }\r\n\r\n  const fillRows = () => {\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart);\r\n    const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n    const dateFormat = \"d\";\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        const cloneDay = day;\r\n        days.push({\r\n          day: cloneDay,\r\n          formattedDate,\r\n          isDisabled: !dateFns.isSameMonth(day, monthStart),\r\n          data: null,\r\n          isLoading: dateFns.isSameMonth(day, monthStart),\r\n        });\r\n        day = dateFns.addDays(day, 1);\r\n      }\r\n      rows.push(days);\r\n      days = [];\r\n    }\r\n    setRows(rows)\r\n  };\r\n\r\n  const getMonthData = async () => {\r\n    setIsStartLoading(true);\r\n    setIsFreezing(true);\r\n    \r\n    const res = await API.requestMonthGames(currentMonth);\r\n    \r\n    if (res === 'ERROR') {\r\n      setIsFreezing(false);\r\n      return new Error('LOADING FAILED')\r\n    }\r\n\r\n    for (let findex = 0; findex < rows.length; findex++) {\r\n      const days = rows[findex];\r\n      for (let sindex = 0; sindex < days.length; sindex++) {\r\n        const currentDay = {...days[sindex]};\r\n        if (!currentDay.isDisabled) {\r\n            currentDay.isLoading = false;\r\n            currentDay.data = res.filter((item: any) => (\r\n                dateFns.format(currentDay.day, RAWG_DATE_FORMAT) === item.released\r\n              )).slice(0,5);\r\n\r\n            const tempRows = [...rows];\r\n            tempRows[findex][sindex] = currentDay;\r\n            setRows(tempRows);\r\n        }\r\n      }\r\n    }\r\n    setIsFreezing(false);\r\n  }\r\n\r\n  const onDateClick = (day: string) => {\r\n    history.push(`/day/:${day}`);\r\n  };\r\n\r\n  const nextMonth = () => {\r\n    if (!isFreezing) {\r\n      setCurrentMonth(dateFns.addMonths(currentMonth, 1));\r\n      setRows([]);\r\n      setIsStartLoading(false);\r\n      setIsFreezing(false);\r\n    }\r\n  };\r\n\r\n  const prevMonth = () => {\r\n    if (!isFreezing) {\r\n      setCurrentMonth(dateFns.subMonths(currentMonth, 1));\r\n      setRows([]);\r\n      setIsStartLoading(false);\r\n      setIsFreezing(false);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // test = async () => {\r\n    // const {currentMonth} = this.state;\r\n    // const res = await API.requestMonthGames(currentMonth);\r\n    // console.log(res);\r\n    // this.getMonthData()\r\n  // }\r\n\r\n    return (\r\n      <div className=\"calendar\">\r\n        {/* <button\r\n          style={{height: '20px'}}\r\n          onClick={this.test}\r\n        >\r\n          <span>TEST</span>\r\n        </button> */}\r\n        <Header\r\n          currentLocale={currentLocale}\r\n          currentMonth={currentMonth}\r\n          nextMonthCallback={nextMonth}\r\n          prevMonthCallback={prevMonth}\r\n        />\r\n        {renderDays()}\r\n        <Cells rows={rows} onDateClick={onDateClick} />\r\n      </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  gamesData: gamesDataSelector(state),\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\r\n  recordData,\r\n}, dispatch)\r\n\r\n\r\n// const connected = withRouter(<Calendar />);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Calendar)","import React, { Component } from 'react';\n\nimport Calendar from '../../components/Calendar/Calendar';\nimport './App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div id=\"logo\">\n            <span className=\"icon\">date_range</span>\n            <span>\n              Release <b>calendar</b>\n            </span>\n          </div>\n        </header>\n        <div className=\"calendar-wrap\">\n          <Calendar />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, {useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport API from '../../api/api';\r\n\r\nimport '../App/App.css';\r\nimport './styles.css';\r\n\r\n\r\nconst DateScreen = () => {\r\n  const [games, setGames] = useState<any>([]);\r\n\r\n  const {currentDate} = useParams<any>();\r\n\r\n  useEffect(() => {\r\n    getCurrentDateData(currentDate);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  \r\n  const getCurrentDateData = async (date: string) => {\r\n    const res = await API.requestDayGames(date.slice(1));\r\n    \r\n    if (res !== 'ERROR') {\r\n      setGames(res.data.results);\r\n    }\r\n  }\r\n\r\n  const getGameDataById = async (id: number, slug: string) => {\r\n    const res = await API.requestGameInfo(id);\r\n    const res1 = await API.requestStoresInfo(slug);\r\n\r\n    const {description_raw, stores} = res.data;\r\n\r\n    const storesWithLinks = res1.data.results.map((item2: any) => {\r\n      const findData = stores.find((item: any) => item.store.id === item2.store_id);\r\n\r\n      if (findData) {\r\n        return {\r\n          ...findData,\r\n          ...item2,\r\n        }\r\n      }\r\n      return item2;\r\n    })\r\n\r\n    const newList = games.map((item: any) => {\r\n      if (item.id === id) {\r\n        return {\r\n          ...item,\r\n          description: description_raw,\r\n          stores: storesWithLinks,\r\n          withDetails: true,\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n    setGames(newList);\r\n  }\r\n\r\n  const deleteExtraData = (id: number) => {\r\n    const newList = games.map((item: any) => {\r\n      if (item.id === id) {\r\n        return {\r\n          ...item,\r\n          description: null,\r\n          stores: null,\r\n          trailers: null,\r\n          withDetails: false,\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n    setGames(newList);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <div id=\"logo\">\r\n          <span className=\"icon\">date_range</span>\r\n          <span>\r\n            Release <b>calendar</b>\r\n          </span>\r\n        </div>\r\n      </header>\r\n      <div className=\"calendar-wrap\">\r\n        <div className=\"heading-wrap\">\r\n          <h2 className=\"game-title-date\">\r\n            {currentDate.slice(1)}\r\n          </h2>\r\n        </div>\r\n        <div className=\"games-list-wrap\">\r\n          {games.map(({\r\n            name,\r\n            id,\r\n            background_image,\r\n            added,\r\n            genres,\r\n            metacritic,\r\n            stores,\r\n            description,\r\n            slug,\r\n            trailers,\r\n            storeLinks,\r\n            withDetails,\r\n          }: any) => (\r\n            <div key={id}>\r\n              <div className=\"game-item\">\r\n                {/* <button\r\n                  className=\"button-load\"\r\n                  onClick={() => {\r\n                    !withDetails ? getGameDataById(id, slug) : deleteExtraData(id);\r\n                  }}\r\n                >\r\n                  {!withDetails ? 'Більше інформації': 'приховати інформацію'}\r\n                </button> */}\r\n                <img className=\"game-image\" src={background_image} alt='gameimage' />\r\n                <div className=\"game-info\">\r\n                  <p className=\"game-title\">{name}</p>\r\n                  <p className=\"game-extra-text\">{`Зацікавилось: `}<span className=\"game-title\">{added}</span></p>\r\n                  {genres && (\r\n                    <p>Жанри: {genres.map((item: any) => <span key={item.id}>{item.name} </span>)}</p>\r\n                  )}\r\n                  {metacritic && (\r\n                    <p>Metacritic: {metacritic}</p>\r\n                  )}\r\n                  {stores && (\r\n                    <p>Магазини: {stores.map((item: any) => {\r\n                      if (item.name) {\r\n                        return <span key={item.name}>{`${item?.name} `} </span>\r\n                      } else {\r\n                        return (\r\n                          <a key={item.store.name} rel=\"noreferrer\" target=\"_blank\" href={item.url}>\r\n                            {`${item.store.name} `}\r\n                          </a>\r\n                        )\r\n                      }\r\n                    })}</p>\r\n                  )}\r\n                  <button\r\n                    className=\"button-load\"\r\n                    onClick={() => {\r\n                      !withDetails ? getGameDataById(id, slug) : deleteExtraData(id);\r\n                    }}\r\n                  >\r\n                    {!withDetails ? 'Більше інформації': 'приховати інформацію'}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              {description && (\r\n                <>\r\n                  <p>Опис</p>\r\n                  <p>{description}</p>\r\n                </>\r\n              )}\r\n            </div>\r\n            \r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateScreen;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Main from '../App/App';\r\nimport DateScreen from \"../Date/DateScreen\";\r\n\r\nconst Router = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path='/'>\r\n          <Main />\r\n        </Route>\r\n        <Route path='/day/:currentDate'>\r\n          <DateScreen />\r\n        </Route>\r\n\r\n        <Redirect to={'/'} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default Router;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Router from './screens/Router/Router';\nimport {Provider} from 'react-redux'\nimport {store} from './store/initStore'\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}