{"version":3,"sources":["constants/config.ts","api/api.ts","selectors/index.ts","store/initStore.ts","components/Calendar/Header.tsx","components/Loading/Loading.tsx","components/Calendar/Cells.tsx","components/Calendar/Calendar.tsx","screens/App/App.tsx","screens/Router/Router.tsx","index.tsx"],"names":["API_KEY","day","validDate","dateFns","axios","get","headers","params","platforms","dates","ordering","timeout","result","console","log","gamesDataSelector","state","gamesData","gamesDataSlice","createSlice","name","initialState","data","meta","reducers","recordData","payload","count","next","previous","results","combinedReducers","combineReducers","reducer","actions","store","configureStore","getState","Header","prevMonthCallback","nextMonthCallback","currentLocale","currentMonth","className","onClick","locale","Loading","type","color","height","width","Cells","rows","useMemo","length","map","row","index","isDisabled","formattedDate","isLoading","a","item","isInteresting","String","Calendar","Date","selectedDate","uk","days","arr","isStartLoading","isFreezing","fillDays","currentDays","startDate","i","push","setState","fillRows","monthStart","monthEnd","endDate","cloneDay","getMonthData","findex","sindex","currentDay","API","requestDayGames","gameData","slice","added","tempRows","onDateClick","nextMonth","prevMonth","test","this","prevProps","prevState","style","renderDays","React","Component","connect","dispatch","bindActionCreators","App","id","Router","path","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d3af778.chunk.js","sourcesContent":["export const API_KEY = '71fed632d4534bfea69e3d18c9926374';\r\nexport const RAWG_DATE_FORMAT = 'yyyy-MM-dd';","import axios from 'axios';\r\nimport {API_KEY, RAWG_DATE_FORMAT} from '../constants/config';\r\nimport * as dateFns from 'date-fns';\r\nclass API {\r\n  async requestDayGames(day: Date) {\r\n    const validDate = dateFns.format(day, RAWG_DATE_FORMAT);\r\n\r\n    try {\r\n      const result = await axios.get(`https://api.rawg.io/api/games?key=${API_KEY}`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // 'Access-Control-Allow-Origin': '*'\r\n      },\r\n      params: {\r\n        platforms: '4',\r\n        dates: `${validDate},${validDate}`,\r\n        ordering: '-added',\r\n      },\r\n      timeout: 3000,\r\n    });\r\n    return result;\r\n    } catch (error) {\r\n      console.log('ERROR', error);\r\n      \r\n      return 'ERROR'\r\n    }\r\n  }\r\n\r\n  async test() {\r\n    const result = await axios.get(`https://api.rawg.io/api/games?key=${API_KEY}`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      params: {\r\n        platforms: '4',\r\n        dates: `2020-12-10,2020-12-10`,\r\n        // ordering: '-released',\r\n        ordering: '-added',\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default new API();","\r\nexport const gamesDataSelector = (state: any) => state.gamesData;","import { createSlice, configureStore, combineReducers } from '@reduxjs/toolkit'\r\n\r\ninterface IGamesData {\r\n  data: any,\r\n  meta: any,\r\n}\r\n\r\nexport const gamesDataInitState: IGamesData = {\r\n  data: null,\r\n  meta: null,\r\n}\r\n\r\nconst gamesDataSlice = createSlice({\r\n  name: 'gameData',\r\n  initialState: gamesDataInitState,\r\n  reducers: {\r\n    recordData: (state, payload: any) => {\r\n      const {count, next, previous, results} = payload.data;\r\n\r\n      state.data = results;\r\n      state.meta = {\r\n        count,\r\n        next,\r\n        previous\r\n      }\r\n    },\r\n  }\r\n})\r\n\r\nconst combinedReducers = combineReducers({\r\n  gamesData: gamesDataSlice.reducer,\r\n})\r\n\r\nexport const {recordData} = gamesDataSlice.actions;\r\n\r\nexport const store = configureStore({\r\n  reducer: combinedReducers,\r\n})\r\n\r\n// Can still subscribe to the store\r\nconsole.log(store.getState())\r\n","import React, { FC } from 'react';\r\nimport * as dateFns from \"date-fns\";\r\n\r\nconst dateFormat = \"LLLL yyyy\";\r\n\r\ninterface IProps {\r\n  prevMonthCallback: any;\r\n  nextMonthCallback: any;\r\n  currentLocale: Locale;\r\n  currentMonth: Date;\r\n}\r\n\r\nconst Header: FC<IProps> = ({\r\n  prevMonthCallback,\r\n  nextMonthCallback,\r\n  currentLocale,\r\n  currentMonth,\r\n}) => {\r\n  return (\r\n    <div className=\"header row flex-middle\">\r\n        <div className=\"col col-start\">\r\n          <div className=\"icon\" onClick={prevMonthCallback}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n        <div className=\"col col-center\">\r\n          <span>{dateFns.format(currentMonth, dateFormat, {locale: currentLocale})}</span>\r\n        </div>\r\n        <div className=\"col col-end\">\r\n          <div className=\"icon\" onClick={nextMonthCallback}>chevron_right</div>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport RLoading from 'react-loading';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <RLoading type='spin' color='blue' className=\"loading\" height={20} width={20}  />\r\n  )\r\n}\r\n\r\nexport default Loading;","import React, { FC, useMemo } from 'react';\r\nimport Loading from '../Loading/Loading';\r\nimport {IDays} from './Calendar';\r\n\r\ninterface IProps {\r\n  rows: IDays[];\r\n}\r\n\r\nconst Cells: FC<IProps> = ({rows}) => {\r\n\r\n  const render = useMemo(() => {\r\n    if (rows.length > 0) {\r\n      return (\r\n        <div className=\"body\">\r\n          {rows.map((row, index) => (\r\n            <div className=\"row\" key={index}>\r\n              {row.map(({isDisabled, day, formattedDate, data, isLoading}) => (\r\n                <div\r\n                  className={`col cell ${\r\n                    isDisabled\r\n                      ? \"disabled\"\r\n                      : \"\"\r\n                  }`}\r\n                  key={String(day)}\r\n                  onClick={async () => {              \r\n                    // this.getDayData(dateFns.format(day, RAWG_DATE_FORMAT));\r\n                    // const res = await API.requestDayGames(day);\r\n                    // console.log(res);\r\n                    \r\n                  }}\r\n                >\r\n                  <span className=\"number\">{formattedDate}</span>\r\n                  <span className=\"bg\">{formattedDate}</span>\r\n                  {isLoading && <Loading />}\r\n                  {data && data.map((item: any) => (\r\n                    <div key={item.name}>\r\n                      <span className={`game-title ${item.isInteresting && 'game-title-heavy'}`}>\r\n                        {item.name}\r\n                      </span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )\r\n    }\r\n    return <Loading />\r\n  }, [rows])\r\n  return render;\r\n}\r\n\r\nexport default Cells;","import React from \"react\";\r\nimport * as dateFns from \"date-fns\";\r\nimport { uk } from 'date-fns/locale';\r\nimport API from '../../api/api';\r\nimport { bindActionCreators, Dispatch } from \"redux\";\r\nimport { gamesDataSelector } from \"../../selectors\";\r\nimport { connect } from \"react-redux\";\r\nimport {recordData} from '../../store/initStore';\r\nimport Header from \"./Header\";\r\nimport Cells from \"./Cells\";\r\n\r\ninterface IProps {\r\n  recordData: any;\r\n  gamesData: any;\r\n}\r\n\r\n export interface IDay {\r\n  day: Date;\r\n  formattedDate: string;\r\n  isDisabled: boolean;\r\n  data: any;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport type IDays = IDay[];\r\ninterface IState {\r\n  currentMonth: Date,\r\n  selectedDate: Date,\r\n  currentLocale: Locale,\r\n  days: any,\r\n  rows: IDays[],\r\n  arr: boolean[],\r\n  isStartLoading: boolean;\r\n  isFreezing: boolean;\r\n}\r\nclass Calendar extends React.Component<IProps, IState> {\r\n  state: IState = {\r\n    currentMonth: new Date(),\r\n    selectedDate: new Date(),\r\n    currentLocale: uk,\r\n    days: [],\r\n    rows: [],\r\n    arr: [false, false, false, false, false],\r\n    isStartLoading: false,\r\n    isFreezing: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fillDays();\r\n    this.fillRows();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: IProps, prevState: IState) {\r\n    const {currentMonth, rows, isStartLoading} = this.state;\r\n    \r\n    if (!isStartLoading && rows.length > 0) {\r\n      // this.getMonthData();\r\n      this.getMonthData();\r\n    }\r\n    \r\n    if (currentMonth !== prevState.currentMonth) {\r\n      this.fillDays();\r\n      this.fillRows();\r\n    }\r\n  }\r\n\r\n  fillDays = () => {\r\n    const {currentLocale} = this.state;\r\n    const dateFormat = \"iiii\";\r\n    const currentDays = [];\r\n  \r\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      currentDays.push(\r\n        dateFns.format(dateFns.addDays(startDate, i), dateFormat, {locale: currentLocale})\r\n      );\r\n    }\r\n\r\n    this.setState({days: currentDays});\r\n  }\r\n\r\n  renderDays() {\r\n    const {days} = this.state;\r\n\r\n    return (\r\n    <div className=\"days row\">\r\n      {days.length > 0 && days.map((item: any) => (\r\n        <div className=\"col col-center\" key={String(item)}>\r\n          {item}\r\n        </div>\r\n      ))}\r\n    </div>\r\n    );\r\n  }\r\n\r\n  fillRows = () => {\r\n    const { currentMonth } = this.state;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart);\r\n    const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n    const dateFormat = \"d\";\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        const cloneDay = day;\r\n        days.push({\r\n          day: cloneDay,\r\n          formattedDate,\r\n          isDisabled: !dateFns.isSameMonth(day, monthStart),\r\n          data: null,\r\n          isLoading: dateFns.isSameMonth(day, monthStart),\r\n        });\r\n        day = dateFns.addDays(day, 1);\r\n      }\r\n      rows.push(days);\r\n      days = [];\r\n    }\r\n    this.setState({rows});\r\n  };\r\n\r\n  getMonthData = async () => {\r\n    const {rows} = this.state;\r\n    this.setState({isStartLoading: true, isFreezing: true});\r\n\r\n    for (let findex = 0; findex < rows.length; findex++) {\r\n      const days = rows[findex];\r\n      for (let sindex = 0; sindex < days.length; sindex++) {\r\n        const currentDay = {...days[sindex]};\r\n        if (!currentDay.isDisabled) {\r\n            const gameData = await API.requestDayGames(currentDay.day);\r\n            if (gameData !== 'ERROR') {\r\n              currentDay.isLoading = false;\r\n              currentDay.data = gameData?.data.results.slice(0,5).map((item: any) => (\r\n                {name: item.name, isInteresting: item.added > 5})\r\n              );\r\n              const tempRows = [...rows];\r\n              tempRows[findex][sindex] = currentDay;\r\n              this.setState({rows: tempRows});\r\n  \r\n            } else {\r\n              currentDay.isLoading = false;\r\n              currentDay.data = [{name: 'ERROR', isInteresting: true}];\r\n              const tempRows = [...rows];\r\n              tempRows[findex][sindex] = currentDay;\r\n              this.setState({rows: tempRows});\r\n            }\r\n        }\r\n      }\r\n    }\r\n    this.setState({isFreezing: false})\r\n  }\r\n\r\n  onDateClick = (day: Date) => {\r\n    this.setState({\r\n      selectedDate: day\r\n    });\r\n  };\r\n\r\n  nextMonth = () => {\r\n    const {isFreezing} = this.state;\r\n    if (!isFreezing) {\r\n      this.setState({\r\n        currentMonth: dateFns.addMonths(this.state.currentMonth, 1),\r\n        rows: [],\r\n        isStartLoading: false,\r\n        isFreezing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  prevMonth = () => {\r\n    const {isFreezing} = this.state;\r\n    if (!isFreezing) {\r\n      this.setState({\r\n        currentMonth: dateFns.subMonths(this.state.currentMonth, 1),\r\n        rows: [],\r\n        isStartLoading: false,\r\n        isFreezing: false,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  test = async () => {\r\n\r\n  }\r\n\r\n  render() {\r\n    const {currentLocale, currentMonth, rows} = this.state;\r\n    return (\r\n      <div className=\"calendar\">\r\n        <button\r\n          style={{height: '20px'}}\r\n          onClick={this.test}\r\n        >\r\n          <span>TEST</span>\r\n        </button>\r\n        <Header\r\n          currentLocale={currentLocale}\r\n          currentMonth={currentMonth}\r\n          nextMonthCallback={this.nextMonth}\r\n          prevMonthCallback={this.prevMonth}\r\n        />\r\n        {this.renderDays()}\r\n        <Cells rows={rows} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  gamesData: gamesDataSelector(state),\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\r\n  recordData,\r\n}, dispatch)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Calendar);","import React, { Component } from 'react';\n\nimport Calendar from '../../components/Calendar/Calendar';\nimport './App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div id=\"logo\">\n            <span className=\"icon\">date_range</span>\n            <span>\n              react<b>calendar</b>\n            </span>\n          </div>\n        </header>\n        <div className=\"calendar-wrap\">\n          <Calendar />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Main from '../App/App';\r\n\r\nconst Router = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path='/'>\r\n          <Main />\r\n        </Route>\r\n\r\n        <Redirect to={'/'} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default Router;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Router from './screens/Router/Router';\nimport {Provider} from 'react-redux'\nimport {store} from './store/initStore'\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}